// CPU Scheduling

#include<stdio.h>
#include<stdlib.h>

int process[10],arrival[10],at[10],burst[10],bt[10],priority[10],visited[10],turnaround[10],waiting[10],q[20],cmp[10],n,tq;
float avgwt,avgtt;

void swap(int *a,int *b){
    int temp=*a;
    *a=*b;
    *b=temp;
}

void sort(int k){
    
    for(int j=0;j<n;j++)
    {
        for(int i =0;i<n-1;i++)
        {
            if(arrival[i]>arrival[i+1])
            {
                swap(&arrival[i],&arrival[i+1]);
                swap(&burst[i],&burst[i+1]);
                swap(&process[i],&process[i+1]);
                if(k==3)
                    swap(&priority[i],&priority[i+1]);
            }
        }
    }
}

void display(int k)
{ 
    if(k == 0||k==4)
    {
    	printf("\nId\tArrival\t  Burst\t  Waiting\tTurnaround");
    	for(int i =0;i<n;i++)
    	    printf("\n%i\t  %i\t    %i\t   %i\t\t     %i\t",process[i],arrival[i],burst[i],waiting[i],turnaround[i]);
    }
    else 
    {
        printf("\nId\tArrival\t  Burst\t  Waiting\tTurnaround\tPriority");
	for(int i =0;i<n;i++)
	    printf("\n%i\t  %i\t    %i\t    %i\t\t     %i\t\t  %i\t",process[i],arrival[i],burst[i],waiting[i],turnaround[i],priority[i]);
    }
    
    printf("\nThe average waiting time is %.2f\n",avgwt);
	printf("The average turn around time is %.2f\n",avgtt);
	if(k==4)
	    printf("The time quantum is %d\n\n",tq);
	else
	    printf("\n");
}

void avg()
{
    avgtt=avgwt=0;
    
    for(int i =0;i<n;i++)
    {
        avgtt+=turnaround[i];
        avgwt+=waiting[i];
    }
    
    avgwt/=n;
    avgtt/=n;

}

void fcfs(){
    
    int tim=0;
    avgwt=avgtt=0;
    for(int i =0;i<n;i++)
    {
        if(tim>=arrival[i]){
            waiting[i]=tim- arrival[i];
            tim+=burst[i];
        }
        else{
            tim++;
            i--;
        }
        avgwt+=waiting[i];
    }
     for(int i =0;i<n;i++)
    {
        turnaround[i]=burst[i]+waiting[i];
        avgtt+=turnaround[i];
    }
    
    avgwt/=n;
    avgtt/=n;
    
    display(0);
}

void sjf(){
    
    int temp,val,low;
    
	cmp[0] = arrival[0] + burst[0];
	turnaround[0] = cmp[0] - arrival[0];
	waiting[0] = turnaround[0] - burst[0];
	
	for(int i =1; i<n; i++)
	{
		temp = cmp[i-1];
		low = burst[i];
		for(int j =i;j<n;j++)
		{
			if(temp >= arrival[j] && low >= burst[j])
			{
				low = burst[j];
				val = j;
			}
		}
		cmp[val] = temp + burst[val];
		turnaround[val] = cmp[val] - arrival[val];
		waiting[val] = turnaround[val] - burst[val];
		
		swap(&arrival[val],&arrival[i]);
		swap(&burst[val],&burst[i]);
		
		swap(&cmp[val],&cmp[i]);
		swap(&waiting[val],&waiting[i]);
		swap(&turnaround[val],&turnaround[i]);
		
		swap(&process[val],&process[i]);
		
	}
	avg();
    display(0);
}

int psort(int a[], int s)
{
    int ind=0;
    for (int i = 0; i < s; i++)
    {
        if (prio[a[i]] < prio[a[ind]])
            ind=i;
    }
    return (a[ind]);
}

int remain()
{
	int s = 0;
	for(int i =0; i<n ;i++)
	 	s+= bt[i];
	return(s);
}


void prioritysh(){
  
  int time = 0, k,r=0,j =0,temp[20];
	for(int i =0;i<n;i++)
	{
		waiting[i] = -1;
		bt[i] = burst[i];
	}
	time = 0;
	while(remain())
	{
		r =0;
		//finding all jobs with arrival time less than current time 
		for(k=0;k < n; k++)
		{
			if(time>=arrival[k] && bt[k] > 0)
			{
				temp[r] = k;
				r++;
			
			}
		}
		// finding job with highest priority
		if(r>0)
		{
			if(r==1)
				j = temp[0];
			else
				j = psort(temp,r);
			
			waiting[j] = time - arrival[j];
			turnaround[j] = waiting[j] + burst[j];
			time += burst[j] ;
			bt[j] = 0;
		}
		else
			time++;
	}
	
	avg();
    display(3);  
}

int front =-1, rear =-1,last[100];

void push(int item)
{
     if(front==-1)
     	front = 0;
     rear=rear+1;
     last[rear]=item;
    }
    int pop()
    {
     int item=last[front];
     front=front+1;
     return(item);
 
}

void dis()
{
    if(front==-1)
        printf("Queue is empty \n");
    else
    {
        printf("Process in queue: \n");
        for(int i=front;i<=rear;i++)
        printf("%d ",last[i]);
        printf("\n");
    }
}

void roundrobin(){
    
	int time = 0,r=0,first[20], f =0,t = 0;
	for(int i =0;i<n;i++)
	{
		waiting[i] = -1;
		bt[i]=burst[i];
		first[i] = -1;
	}
	while(remain() >0)
	{
		for(int k =0;k<n;k++)
		{
			if(time>= arrival[k]&& bt[k] >0 && first[k] == -1)
			{
			push(k);
			first[k] = 0;
			r++;
			}
		}
		if(f==1)
			push(t);
		dis();
		if(bt[last[front]]<= tq && bt[last[front]] >0 && r>0)
		{
			time += bt[last[front]];
			bt[last[front]] = 0;
			turnaround[last[front]] = time - arrival[last[front]];
			waiting[last[front]] = turnaround[last[front]] - burst[last[front]];
			t = pop();
			r--;
			f =0;
		}
		else if(bt[last[front]] > 0 && r>0)
		{
			time += tq;
			bt[last[front]] -= tq;
			t = pop();
			f =1;

		}
		else
			time++;	 
	}
    avg();
    display(4);
}

void main()
{
    int y;
    
    do{ 
        printf("Enter 1 - fcfs scheduling \nEnter 2 - sjf scheduling \nEnter 3 - priority scheduling  \nEnter 4 - round robin scheduling  \nEnter 0 - exit\t");
        scanf("%d",&y);
        
        if(y==0)
            exit(0);
            
        printf("Enter the number of processes  ");
        scanf("%d",&n);
        
        for(int i=0;i<n;i++)
            process[i]=i+1;
        
        printf("Enter the arrival time  ");
        for(int i=0;i<n;i++)
        {
            scanf("%d",&arrival[i]);
            at[i]=arrival[i];
        }
            
        printf("Enter the burst time  ");
        for(int i=0;i<n;i++)
            scanf("%d",&burst[i]); 
        
        switch(y)
        {
            case 1: sort(1);
                    fcfs();
                    break;
            case 2: sort(2);
                    sjf();
                    break;
            case 3: printf("Enter the priorities  ");
                    for(int i=0;i<n;i++)
                        scanf("%d",&priority[i]);
                    sort(3);
                    prioritysh();
                    break;
            case 4: sort(4);
                    printf("Enter the time quantum  ");
                    scanf("%d",&tq);
                    roundrobin();
                    break;
            default: printf("Invalid choice \n");
        }
    }while(y!=0);
}
